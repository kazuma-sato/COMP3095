package servlet.authenticate;

import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

@WebServlet("/AuthenticateServlet")
public class AuthenticateServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		
		final String JDBC_Driver = "com.mysql.jdbc.Driver";
		final String DB_URL = "jdbc:mysql://localhost:3306/comp3095";
		final String DB_USER = "root";
		final String DB_PASS = "";
		
		final String secret = "K2vJAdF3hJv4nhD3";
		
		boolean authenticationSuccess = false;
		
		try {
			final String username = request.getParameter("username").trim().toLowerCase();
			final String password = request.getParameter("password").trim();
			final boolean remember = (request.getParameter("remember") == "true");
			
			Class.forName(JDBC_Driver);
			Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
			
			PreparedStatement prepSelectStatement = conn.prepareStatement(
					"SELECT count(*) "+ 
					"FROM USERS WHERE username = ?;");
			prepSelectStatement.setString(1, username);
			final ResultSet selectResult  = prepSelectStatement.executeQuery();
			selectResult.next();
			
			if (selectResult.getInt(1) != 1) {
				System.out.println("Dude, this guy doesn't exist!");
				
				prepSelectStatement.close();
				selectResult.close();
				conn.close();
			} else {
				PreparedStatement prepLoginStatement = conn.prepareStatement(
						"SELECT * " + 
						"FROM USERS " +
						"WHERE username = ? AND password = ?;");
				prepLoginStatement.setString(1, username);
				prepLoginStatement.setString(2, password);
				final ResultSet loginResult  = prepLoginStatement.executeQuery();
				
				authenticationSuccess = loginResult.next();
				
				if(authenticationSuccess) {
					int columnCount = loginResult.getMetaData().getColumnCount();
					HttpSession session = request.getSession(true);
					
					String columnName;
					String columnValue;
					
					for(int i = 1; i <= columnCount; i++) {
						columnName = loginResult.getMetaData().getColumnName(i);
						columnValue = loginResult.getString(i); 
						System.out.println(columnName + ": " + columnValue);
						
						session.setAttribute(columnName, new String(columnValue));
					}
					
					if(remember) {
						// I know this isn't good practice
						Cookie userCookie = new Cookie(
								hashWithSecret("username", secret), hashWithSecret(username, secret));
						Cookie passCookie = new Cookie(
								hashWithSecret("password", secret), hashWithSecret(password, secret));
						userCookie.setMaxAge(604800);
						userCookie.setPath("/");
						response.addCookie(userCookie);
						response.addCookie(passCookie);
					}
				}
				prepLoginStatement.close();
				loginResult.close();
				conn.close();
			}	
		} catch(NullPointerException ex) {
			ex.printStackTrace();
		} catch(SQLException se) {
			se.printStackTrace();
		} catch(Exception e) {
			e.printStackTrace();
		} 
		if(authenticationSuccess){
			request.getRequestDispatcher("WelcomeServlet").forward(request, response);
		} else {
			request.getRequestDispatcher("LoginServlet").forward(request, response);
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {

		doGet(request, response);
	}
	
    private String hashWithSecret(String value, String secret) {
    	
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
            return convertByteArrayToHexString(messageDigest.digest((value + secret).getBytes()));
        } catch (NoSuchAlgorithmException e) {
            log("MessageDigest failed " + e);
            return null;
        }
    }
    
    private static String convertByteArrayToHexString(byte[] arrayBytes) {
    	
        StringBuilder stringBuffer = new StringBuilder();
        for (byte arrayByte : arrayBytes) {
            stringBuffer.append(Integer.toString((arrayByte & 0xff) + 0x100, 16).substring(1));
        }
        return stringBuffer.toString();
    }
}
